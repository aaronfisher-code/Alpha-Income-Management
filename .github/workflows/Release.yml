name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: 'auto'
      jdeploy_version:
        description: 'The version of jDeploy to use'
        required: false
        default: '4.0.51'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 22
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '22'

      - name: Increment version if auto
        id: increment_version
        run: |
          if [ "${{ github.event.inputs.version }}" == "auto" ]; then
            new_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | awk -F. '{$NF += 1;} 1' OFS=.)
            echo "New version: $new_version"
          else
            new_version=${{ github.event.inputs.version }}
          fi
          echo $new_version > new_version.txt
          mvn versions:set -DnewVersion=$new_version
          echo "::set-output name=new_version::$new_version"
        shell: bash

      - name: Create application.properties
        run: |
          echo "api.base.url=${{ secrets.API_BASE_URL }}" >> src/main/resources/application.properties
          echo "api.token=${{ secrets.API_TOKEN }}" >> src/main/resources/application.properties
          echo "VERSION=${{ steps.increment_version.outputs.new_version }}" >> src/main/resources/application.properties
        shell: bash

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Commit version change
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add pom.xml
          git add package.json
          git commit -m "Increment version to ${{ steps.increment_version.outputs.new_version }}"
          git push
        shell: bash

      - name: Push new tag
        run: |
          git tag v${{ steps.increment_version.outputs.new_version }}
          git push --tags

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Set up Git Config
        shell: bash
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
      - name: Sanitize version name
        shell: bash
        run: |
          TAG_VERSION=v${{ steps.increment_version.outputs.new_version }}
          if [[ $TAG_VERSION} = v* ]]; then
          echo "TAG_VERSION=${TAG_VERSION:1}" >> $GITHUB_ENV
          else
          echo "TAG_VERSION=${TAG_VERSION}" >> $GITHUB_ENV
          fi
      - name: Prepare Installer Bundles for Tag
        shell: bash
        run: |
          npm pkg set version="$TAG_VERSION"
          npm pkg set jdeploy.jdeployVersion='${{ inputs.jdeploy_version }}'
          npm pkg set jdeploy.commitHash="$GITHUB_SHA"
          npm pkg set jdeploy.gitTag="v${{ steps.increment_version.outputs.new_version }}"
          GITHUB_REPOSITORY=${{ github.repository }} npx 'jdeploy@${{ inputs.jdeploy_version }}' github-prepare-release
        env:
          GH_TOKEN: ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}
      - name: Replace 'master' in release notes
        run: |
          sed -i 's/master/v${{ steps.increment_version.outputs.new_version }}/g' ./jdeploy/github-release-files/jdeploy-release-notes.md
        shell: bash
      - name: Publish package-info.json to Github
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "jdeploy"
          prerelease: true
          title: "jDeploy Package Info"
          files: ./jdeploy/github-release-files/package-info.json
      - name: Create Release and Upload Assets
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs').promises;
            const { repo } = context;
            const version = 'v${{ steps.increment_version.outputs.new_version }}';
            
            // Create release
            const release = await github.rest.repos.createRelease({
              ...repo,
              tag_name: version,
              name: `Release ${version}`,
              draft: false,
              prerelease: false
            });
            
            // Upload assets
            const files = await fs.readdir('./jdeploy/github-release-files');
            for (const file of files) {
              const filePath = `./jdeploy/github-release-files/${file}`;
              const stats = await fs.stat(filePath);
              if (stats.isFile()) {
                await github.rest.repos.uploadReleaseAsset({
                  ...repo,
                  release_id: release.data.id,
                  name: file,
                  data: await fs.readFile(filePath)
                });
              }
            }
            
            // Update release body
            const oldBody = release.data.body || '';
            const jdeployNotes = await fs.readFile('./jdeploy/github-release-files/jdeploy-release-notes.md', 'utf8');
            const newBody = `${oldBody}\n\n${jdeployNotes}`;
            await github.rest.repos.updateRelease({
              ...repo,
              release_id: release.data.id,
              body: newBody
            });
