name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: 'auto'
      jdeploy_version:
        description: 'The version of jDeploy to use'
        required: false
        default: '4.0.51'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 22
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '22'

      - name: Increment version if auto
        id: increment_version
        run: |
          if [ "${{ github.event.inputs.version }}" == "auto" ]; then
            new_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | awk -F. '{$NF += 1;} 1' OFS=.)
            echo "New version: $new_version"
          else
            new_version=${{ github.event.inputs.version }}
          fi
          echo $new_version > new_version.txt
          mvn versions:set -DnewVersion=$new_version
          echo "::set-output name=new_version::$new_version"
        shell: bash

      - name: Create application.properties
        run: |
          echo "DB_URL=${{ secrets.DB_URL }}" > src/main/resources/application.properties
          echo "DB_USERNAME=${{ secrets.DB_USER }}" >> src/main/resources/application.properties
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> src/main/resources/application.properties
          echo "api.base.url=${{ secrets.API_BASE_URL }}" >> src/main/resources/application.properties
          echo "api.token=${{ secrets.API_TOKEN }}" >> src/main/resources/application.properties
          echo "VERSION=${{ steps.increment_version.outputs.new_version }}" >> src/main/resources/application.properties
        shell: bash

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Commit version change
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add pom.xml
          git add package.json
          git commit -m "Increment version to ${{ steps.increment_version.outputs.new_version }}"
          git push
        shell: bash

      - name: Push new tag
        run: |
          git tag v${{ steps.increment_version.outputs.new_version }}
          git push --tags

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.increment_version.outputs.new_version }}
          release_name: Release ${{ steps.increment_version.outputs.new_version }}
          draft: false
          prerelease: false

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Set up Git Config
        shell: bash
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
      - name: Sanitize version name
        shell: bash
        run: |
          TAG_VERSION=v${{ steps.increment_version.outputs.new_version }}
          if [[ $TAG_VERSION} = v* ]]; then
          echo "TAG_VERSION=${TAG_VERSION:1}" >> $GITHUB_ENV
          else
          echo "TAG_VERSION=${TAG_VERSION}" >> $GITHUB_ENV
          fi
      - name: Prepare Installer Bundles for Tag
        shell: bash
        run: |
          npm pkg set version="$TAG_VERSION"
          npm pkg set jdeploy.jdeployVersion='${{ inputs.jdeploy_version }}'
          npm pkg set jdeploy.commitHash="$GITHUB_SHA"
          npm pkg set jdeploy.gitTag="v${{ steps.increment_version.outputs.new_version }}"
          GITHUB_REPOSITORY=${{ github.repository }} npx 'jdeploy@${{ inputs.jdeploy_version }}' github-prepare-release
        env:
          GH_TOKEN: ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}
      - name: Publish package-info.json to Github
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "jdeploy"
          prerelease: true
          title: "jDeploy Package Info"
          files: ./jdeploy/github-release-files/package-info.json
      - name: Upload Files to Github Release for Tag
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "./jdeploy/github-release-files/*"
          overwrite: true
      - name: Update release body (for tag release)
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REF_NAME: "v${{ steps.increment_version.outputs.new_version }}"
          GITHUB_REPOSITORY: ${{ github.repository }}

        run: |
          set -e
          BODY=$(cat ./jdeploy/github-release-files/jdeploy-release-notes.md)

          RELEASE_RESULT=$(curl -s \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${GITHUB_TOKEN}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/v${{ steps.increment_version.outputs.new_version }})
          RELEASE_ID=$( jq -r  '.id' <<< "${RELEASE_RESULT}" ) 
          OLD_BODY=$(jq -r '.body' <<< "${RELEASE_RESULT}" )
          NEW_BODY=$(GITHUB_RELEASE_BODY="$OLD_BODY" JDEPLOY_RELEASE_NOTES="$BODY" npx 'jdeploy@${{ inputs.jdeploy_version }}' github-build-release-body)
          BODY_JSON="{\"body\": $(echo "$NEW_BODY" | jq -sR .)}"
          echo "Release ID is ${RELEASE_ID}"
          curl \
          -X PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${GITHUB_TOKEN}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/${RELEASE_ID} \
          -d "$BODY_JSON"
